name: Test Suite

on:
  push:
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        exist-version: [6.2.0, release]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Docker image
      run: docker build --build-arg EXIST_VERSION=${{ matrix.exist-version}} -t jinks-templates-test .
      
    - name: Start eXist-db container
      run: |
        # Clean up any existing container with the same name
        docker stop jinks-templates-test-container 2>/dev/null || true
        docker rm jinks-templates-test-container 2>/dev/null || true
        
        docker run -d \
          --name jinks-templates-test-container \
          -p 8080:8080 \
          -p 8443:8443 \
          jinks-templates-test
          
    - name: Wait for eXist-db to be ready
      run: |
        echo "Waiting for eXist-db to start..."
        timeout=180
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f http://localhost:8080/exist/ > /dev/null 2>&1; then
            echo "✅ eXist-db is ready!"
            break
          fi
          echo "⏳ Waiting for eXist-db... ($counter/$timeout seconds)"
          sleep 5
          counter=$((counter + 5))
        done
        
        if [ $counter -eq $timeout ]; then
          echo "❌ Timeout waiting for eXist-db to start"
          echo "Container logs:"
          docker logs jinks-templates-test-container
          exit 1
        fi
        
    - name: Wait for app to be deployed
      run: |
        echo "Waiting for app to be deployed..."
        timeout=120
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f -X POST http://localhost:8080/exist/apps/jinks-templates-test/api/templates/ \
            -H "Content-Type: application/json" \
            -d '{"template":"<p>test</p>","params":{},"mode":"html"}' > /dev/null 2>&1; then
            echo "✅ App is deployed and ready!"
            break
          fi
          echo "⏳ Waiting for app deployment... ($counter/$timeout seconds)"
          sleep 3
          counter=$((counter + 3))
        done
        
        if [ $counter -eq $timeout ]; then
          echo "❌ Timeout waiting for app to be deployed"
          echo "Container logs:"
          docker logs jinks-templates-test-container
          echo "Testing API endpoint:"
          curl -v -X POST http://localhost:8080/exist/apps/jinks-templates-test/api/templates/ \
            -H "Content-Type: application/json" \
            -d '{"template":"<p>test</p>","params":{},"mode":"html"}' || true
          exit 1
        fi
        
    - name: Test API connectivity
      run: |
        echo "Testing API connectivity..."
        curl -X POST http://localhost:8080/exist/apps/jinks-templates-test/api/templates/ \
          -H "Content-Type: application/json" \
          -d '{"template":"<p>Hello World</p>","params":{},"mode":"html"}' \
          -w "\nHTTP Status: %{http_code}\n"
        
    - name: Run test suite
      run: npm test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.exist-version }}
        path: |
          coverage/
          coverage/junit.xml
          
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: coverage-report-${{ matrix.exist-version }}
        path: coverage/
        
    - name: Cleanup containers
      if: always()
      run: |
        echo "Cleaning up containers..."
        docker stop jinks-templates-test-container || true
        docker rm jinks-templates-test-container || true
        
    - name: Cleanup images
      if: always()
      run: |
        echo "Cleaning up images..."
        docker rmi jinks-templates-test || true 